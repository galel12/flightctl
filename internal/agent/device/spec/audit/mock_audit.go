// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_audit.go -package=audit
//

// Package audit is a generated GoMock package.
package audit

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogger)(nil).Close))
}

// LogApply mocks base method.
func (m *MockLogger) LogApply(ctx context.Context, oldVersion, newVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogApply", ctx, oldVersion, newVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogApply indicates an expected call of LogApply.
func (mr *MockLoggerMockRecorder) LogApply(ctx, oldVersion, newVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogApply", reflect.TypeOf((*MockLogger)(nil).LogApply), ctx, oldVersion, newVersion)
}

// LogFailure mocks base method.
func (m *MockLogger) LogFailure(ctx context.Context, oldVersion, newVersion string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFailure", ctx, oldVersion, newVersion, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogFailure indicates an expected call of LogFailure.
func (mr *MockLoggerMockRecorder) LogFailure(ctx, oldVersion, newVersion, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFailure", reflect.TypeOf((*MockLogger)(nil).LogFailure), ctx, oldVersion, newVersion, err)
}

// LogRollback mocks base method.
func (m *MockLogger) LogRollback(ctx context.Context, oldVersion, newVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRollback", ctx, oldVersion, newVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRollback indicates an expected call of LogRollback.
func (mr *MockLoggerMockRecorder) LogRollback(ctx, oldVersion, newVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRollback", reflect.TypeOf((*MockLogger)(nil).LogRollback), ctx, oldVersion, newVersion)
}
